{"name":"python-timezones","body":"### Making Python timezones suck less with timezones\r\n[timezones](https://github.com/amix/python-timezones) makes timezones more user-friendly for the users, especially because it picks the best timezone automatically based on the user's IP address.\r\n\r\n```bash\r\n$ sudo pip install timezones\r\n```\r\n\r\nWhat the library provides:\r\n* User friendly rendering of common timezones. [pytz.common_timezones](http://pytz.sourceforge.net/) includes 430 common timezones, without any smart sorting or display of useful information such as timezone offsets. This provides an awful experience if you just present this to the users - - like [it's done in Django](https://docs.djangoproject.com/en/dev/topics/i18n/timezones/)\r\n* Auto-guessing the user's timezone based on the user's IP. This is done via [pygeoip](http://code.google.com/p/pygeoip/)\r\n* Supporting fixed offsets timezones, such as \"GMT +1:00\"\r\n\r\n### Requires\r\n\r\n* [pytz](http://pytz.sourceforge.net/)\r\n* [pygeoip](http://appliedsec.github.com/pygeoip/): Optional, only if you want to enable auto-guess of the timezone\r\n\r\n### Screenshot of the library in action\r\n\r\n![timezones screenshot](http://i.imgur.com/qP7AA.jpg)\r\n\r\n# Modules\r\n\r\n## tz_rendering\r\n\r\nHTML helper to render timezones. The output will be a SELECT element.\r\n\r\nWill auto guess the user's timezone based on IP. Will auto-select the current selected timezone.\r\n\r\nExample usage (returns HTML based on current properties):\r\n\r\n```python\r\nfrom timezones import tz_rendering\r\nhtml_timezones = tz_rendering.html_render_timezones(select_name=timezone',\r\n                                                    current_selected=current_timezone,\r\n                                                    user_ip=get_current_ip(),\r\n                                                    first_entry=_('Select your timezone'))\r\n```\r\n\r\n## zones\r\n\r\nHolds a collection of common timezones. Is much smaller and better formated than pytz.common_timezones. It also supports fixed timezones such as `GMT +7:00`.\r\n\r\nExample usage (returns US based timezones):\r\n\r\n```python\r\nfrom timezones import zones\r\nfor tz_offset, tz_name, tz_formated in zones.get_timezones(only_us=True):\r\n    print tz_formated\r\n\r\n=>\r\n\r\n    \"(GMT-1000) Hawaii')\"\r\n    \"(GMT-0900) Alaska')\"\r\n    \"(GMT-0800) Pacific Time (US & Canada)\"\r\n    ...\r\n```\r\n\r\n## tz_utils\r\n\r\nIncludes timezone related utilities.\r\n\r\nExample usage (get a fixed offset timezone):\r\n```python\r\nprint tz_utils.get_timezone('GMT +10:00')\r\n```\r\n\r\nExample usage (guess timezone by IP, required pygeoip!)::\r\n```python\r\ntz_utils.GEOIP_DATA_LOCATION = '/usr/local/geo_ip/GeoLiteCity.dat'\r\nassert tz_utils.guess_timezone_by_ip('201.246.115.62') == 'Chile/Continental'\r\n```\r\n\r\nExample usage (format timezone by name)::\r\n```python\r\nprint tz_utils.format_tz_by_name('Europe/Copenhagen')\r\n=>\r\n(\"+0100\", \"Europe/Copenhagen\", '(GMT+0100) Copenhagen')\r\n```\r\n\r\nExample usage (is a timezone valid?)::\r\n```python\r\nprint tz_utils.is_valid_timezone('Europe/Copenhagen')\r\n=>\r\nTrue\r\n```\r\n\r\n# Copyright\r\n\r\nCopyright 2012 by [Amir Salihefendic](http://amix.dk/). Licensed under [MIT license](http://www.opensource.org/licenses/mit-license.php).","tagline":"A Python library that provides better selection of common timezones, can output HTML and auto select the best timezone based on user's IP.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}